-- Employees info and emergency json
CREATE TABLE employees (
    employee_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(100) NOT NULL,
    last_name VARCHAR2(100) NOT NULL,
    email VARCHAR2(200) NOT NULL UNIQUE,
    role VARCHAR2(30) NOT NULL CHECK (role in ('EMPLOYEE', 'ADMIN')),
    emergency_contacts CLOB,
    CONSTRAINT chk_emp_emergency_json CHECK (emergency_contacts IS JSON)
);
SELECT tablespace_name, bytes, max_bytes
FROM   user_ts_quotas;

-- Projects to log hours and a json metadata for buget, client info
CREATE TABLE projects (
    project_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    project_name VARCHAR2(200) NOT NULL,
    metadata CLOB,
    CONSTRAINT chk_proj_json CHECK (metadata IS JSON)
);

--Timecards - an employee will submit a timecard weekly
CREATE TABLE timecards (
    timecard_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    employee_id NUMBER NOT NULL,
    week_start_date DATE NOT NULL,
    status VARCHAR2(20) NOT NULL 
            CHECK ( status IN ('SUBMITTED', 'APPROVED', 'REJECTED')),
    CONSTRAINT fk_tc_emp FOREIGN KEY (employee_id)
        REFERENCES employees(employee_id),
    CONSTRAINT uq_emp_week UNIQUE (employee_id, week_start_date) --only a timecard/week
);

--Timecard Entries for each day in a week
CREATE TABLE timecard_entries (
    entry_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    timecard_id NUMBER NOT NULL,
    work_date DATE NOT NULL,
    hours NUMBER NOT NULL,
    project_id NUMBER NOT NULL,    --FK -> PROJECTS
    location VARCHAR2(10) NOT NULL
        CHECK (location IN ('HOME', 'OFFICE')),
    details CLOB,                                   --other details
    CONSTRAINT fk_te_tc FOREIGN KEY (timecard_id)   -- FK TO timecards
     REFERENCES timecards(timecard_id),
    CONSTRAINT fk_te_proj FOREIGN KEY (project_id)  -- FK TO projects
     REFERENCES projects(project_id),               
    CONSTRAINT chk_te_json CHECK (details IS JSON)  
);

-- Days Off
CREATE TABLE days_off(
    off_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    employee_id NUMBER NOT NULL,        -- FK -> EMPLOYEES
    off_date DATE NOT NULL,
    off_type VARCHAR2(30) NOT NULL,
    CONSTRAINT fk_do_emp FOREIGN KEY (employee_id)  -- FK to employees
     REFERENCES employees(employee_id),
    CONSTRAINT uq_emp_off UNIQUE (employee_id, off_date) --unique for each day
);
    
-- Trigger for email validation

CREATE OR REPLACE TRIGGER trg_emp_email_validate
BEFORE INSERT OR UPDATE ON employees
FOR EACH ROW
BEGIN
    IF :NEW.email NOT LIKE '%_@_%._%' THEN
        RAISE_APPLICATION_ERROR(-20001, 'Invalid email format');
    END IF;
END;
/
    
-- Indexes
CREATE INDEX idx_te_proj ON timecard_entries(project_id);
CREATE INDEX idx_te_date ON timecard_entries(work_date);
CREATE INDEX idx_do_date ON days_off(off_date);

-- INDEX for timecard status (submitted/approved/rejected)
CREATE INDEX idx_timecards_status ON timecards(status);


-- INSERT DATA
--employees
INSERT INTO employees (first_name,last_name,email,role,emergency_contacts)
VALUES ('Alice','Smith','alice.smith@endava.com','EMPLOYEE',
    '[{"name":"John Smith","phone":"+40-712-345-678","relationship":"Friend"}]'
);
INSERT INTO employees (first_name,last_name,email,role)
VALUES ('Bob','Jones','bob.jones@endava.com','ADMIN');

INSERT INTO employees (first_name,last_name,email,role,emergency_contacts) VALUES (
  'Maria', 'Havana', 'maira.havana@endava.com', 'EMPLOYEE',
  '[
     {"name":"Sara Jones","phone":"+40-722-111-222","relationship":"Partner"},
     {"name":"Mark Brown","phone":"+40-733-333-444","relationship":"Friend"}
   ]'
);

INSERT INTO employees (first_name,last_name,email,role,emergency_contacts
) VALUES (
  'Carla', 'Ionescu', 'carla.ionescu@endava.com', 'EMPLOYEE',
  '[
     {"name":"Ana Popescu","phone":"+40-744-555-666","relationship":"Mother",
      "preferred_time":"morning","notes":"Only call if urgent"}
   ]'
);

COMMIT;

-- projects
INSERT INTO projects (project_name, metadata)
VALUES ('Timesheets App',
        '{"client":"Endava","budget":100000,"tags":["internal","HR"]}'
);

INSERT INTO projects (project_name, metadata) VALUES (
  'HR Portal',
  '{"client":"Acme Corp","budget":500000,"startDate":"2025-01-15","tags":["HR","Web"]}'
);

INSERT INTO projects (project_name, metadata) VALUES (
  'Billing System',
  '{"client":"Globex","budget":750000,"startDate":"2025-03-01","modules":["Invoices","Payments"]}'
);

INSERT INTO projects (project_name, metadata) VALUES (
  'Mobile App',
  '{"client":"Initech","budget":300000,"platforms":["iOS","Android"],"priority":"High"}'
);

COMMIT;

--timecards

INSERT INTO timecards (employee_id, week_start_date, status)
VALUES (1, DATE '2025-06-02', 'SUBMITTED');

INSERT INTO timecards (employee_id, week_start_date, status)
VALUES (2, DATE '2025-06-09', 'SUBMITTED');

INSERT INTO timecards (employee_id, week_start_date, status)
VALUES (5, DATE '2025-05-26', 'APPROVED');

--timecard entries

INSERT INTO timecard_entries (timecard_id, work_date, hours, project_id, location, details)
VALUES (1, DATE '2025-06-02', 8, 1, 'OFFICE','{"taskCode":"DEV001","notes":"Built table structures"}'
);

INSERT INTO timecard_entries (
  timecard_id, work_date, hours, project_id, location, details
) VALUES (
  1,                  -- Alice, săptămâna 2025-06-02
  DATE '2025-06-02',
  8,                  -- 8 ore
  1,                  -- proiect HR Portal
  'OFFICE',
  '{"taskCode":"DEV001","notes":"Setup schema and tables"}'
);

INSERT INTO timecard_entries (
  timecard_id, work_date, hours, project_id, location, details
) VALUES (
  1,
  DATE '2025-06-03',
  6.5,
  1,
  'HOME',
  '{"taskCode":"DEV002","notes":"Implement business logic"}'
);


INSERT INTO timecard_entries (
  timecard_id, work_date, hours, project_id, location, details
) VALUES (
  2,
  DATE '2025-06-10',
  24,
  2,
  'OFFICE',
  '{"taskCode":"BILL001","notes":"Overtime test"}'
);

INSERT INTO timecard_entries (
  timecard_id, work_date, hours, project_id, location, details
) VALUES (
  2,
  DATE '2025-06-11',
  7.5,
  3,
  'HOME',
  '{"taskCode":"MOBILE100","notes":"UI prototyping"}'
);

COMMIT;

--days off

INSERT INTO days_off (employee_id, off_date, off_type)
VALUES (1, DATE '2025-06-04', 'VACATION');

INSERT INTO days_off (employee_id, off_date, off_type)
VALUES (2, DATE '2025-06-12', 'SICK');

COMMIT;
    
-- VIEWS
-- total hours worked in a week for an employee
CREATE OR REPLACE VIEW vw_employee_weekly_hours AS
SELECT tc.employee_id, tc.week_start_date, SUM(te.hours) AS total_hours
FROM timecards tc
INNER JOIN timecard_entries te
    ON tc.timecard_id = te.timecard_id -- pastreaza doar inregistrarile care au cel putin o intrare
GROUP BY tc.employee_id, tc.week_start_date;

--total numbers of free days for an employee
CREATE OR REPLACE VIEW vw_employee_days_off AS
SELECT e.employee_id, e.first_name, e.last_name,
    COUNT(d.off_id) AS total_days_off
FROM employees e
    LEFT JOIN days_off d
        ON e.employee_id = d.employee_id
GROUP BY e.employee_id, e.first_name, e.last_name;

-- Materialized view for project-week reporting
CREATE MATERIALIZED VIEW mv_project_weekly_hours
BUILD IMMEDIATE
REFRESH COMPLETE
ON DEMAND
AS
SELECT
  e.project_id,
  tc.week_start_date,                   -- the starting date of that week
  SUM(e.hours) AS project_hours         -- total hours logged for that project in that week
FROM timecards tc
JOIN timecard_entries e ON tc.timecard_id = e.timecard_id
GROUP BY e.project_id, tc.week_start_date;

--SELECT
-- Total hours per project for a given week
SELECT
  project_id,
  SUM(hours) AS week_hours
FROM timecard_entries
WHERE work_date BETWEEN DATE '2025-06-02' AND DATE '2025-06-08'
GROUP BY project_id;

-- JSON extract project budget from the JSON metadata
SELECT
  project_id,
  project_name,
  JSON_VALUE(metadata, '$.budget') AS budget
FROM projects
WHERE JSON_EXISTS(metadata, '$.budget');

-- Llist employees who have never submitted a timecard
SELECT
  emp.employee_id,
  emp.first_name || ' ' || emp.last_name AS name
FROM employees emp
WHERE NOT EXISTS (
  SELECT 1
  FROM timecards tc
  WHERE tc.employee_id = emp.employee_id
);

-- SELECT with analytic function
-- rank employees by total hours in a given week
SELECT
  employee_id,
  week_start_date,
  total_hours,
  RANK() OVER (
    PARTITION BY week_start_date
    ORDER BY total_hours DESC
  ) AS weekly_rank
FROM vw_employee_weekly_hours; 
